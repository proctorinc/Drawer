
--
-- LibSQL SQL Schema dump automatic generated by geni
--

CREATE TABLE users (
    id TEXT PRIMARY KEY,
    username TEXT UNIQUE NOT NULL,
    email TEXT UNIQUE NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
, role TEXT NOT NULL DEFAULT 'user' CHECK (role IN ('user', 'admin')), avatar_type VARCHAR (255) NOT NULL DEFAULT 'default', avatar_url VARCHAR (255) NOT NULL DEFAULT '');
CREATE TABLE daily_prompts (
    day TEXT PRIMARY KEY, -- Store as TEXT in YYYY-MM-DD format
    colors TEXT NOT NULL, -- Store as JSON array string
    prompt TEXT NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
CREATE TABLE user_submissions (
    id TEXT PRIMARY KEY,
    user_id TEXT NOT NULL,
    day TEXT NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,
    UNIQUE(user_id, day)
);
CREATE TABLE verification_tokens (
    token TEXT PRIMARY KEY,
    user_id TEXT NOT NULL,
    email TEXT NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    expires_at TIMESTAMP NOT NULL,
    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE
);
CREATE INDEX idx_user_submissions_user_day ON user_submissions (user_id, day);
CREATE INDEX idx_users_email ON users (email);
CREATE INDEX idx_verification_tokens_user_id ON verification_tokens(user_id);
CREATE INDEX idx_verification_tokens_email ON verification_tokens(email);
CREATE TABLE schema_migrations (id VARCHAR(255) NOT NULL PRIMARY KEY);
CREATE TABLE comments (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    submission_id TEXT NOT NULL,
    user_id TEXT NOT NULL,
    text TEXT NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (submission_id) REFERENCES user_submissions(id) ON DELETE CASCADE,
    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE
);
CREATE TABLE sqlite_sequence(name,seq);
CREATE TABLE activity_reads (
    user_id TEXT PRIMARY KEY,
    last_read_activity_id TEXT,
    last_read_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE
);
CREATE TABLE "reactions" (id INTEGER PRIMARY KEY AUTOINCREMENT, user_id TEXT NOT NULL, content_type TEXT NOT NULL CHECK (content_type IN ('submission', 'comment')), content_id TEXT NOT NULL, reaction_id TEXT NOT NULL, created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP, UNIQUE (user_id, content_type, content_id, reaction_id), FOREIGN KEY (user_id) REFERENCES users (id) ON DELETE CASCADE);
CREATE INDEX idx_reactions_content ON reactions (content_type, content_id);
CREATE INDEX idx_reactions_user ON reactions (user_id);
CREATE INDEX idx_reactions_created_at ON reactions (created_at);
CREATE TABLE user_favorite_submissions (
    id TEXT PRIMARY KEY,
    user_id TEXT NOT NULL,
    submission_id TEXT NOT NULL,
    created_at DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
    order_num INTEGER NOT NULL,
    FOREIGN KEY (user_id) REFERENCES users(id),
    FOREIGN KEY (submission_id) REFERENCES user_submissions(id),
    UNIQUE(user_id, submission_id)
);
CREATE TABLE push_subscriptions (
    id TEXT PRIMARY KEY,
    user_id TEXT NOT NULL,
    endpoint TEXT NOT NULL UNIQUE,
    p256dh TEXT NOT NULL,
    auth TEXT NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES users(id)
);
CREATE INDEX idx_users_role ON users (role);
CREATE TABLE friendships (user1 TEXT NOT NULL, user2 TEXT NOT NULL, state TEXT NOT NULL CHECK (state IN ('pending', 'accepted')) DEFAULT 'pending', inviter_id TEXT NOT NULL, created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP, FOREIGN KEY (user1) REFERENCES users (id) ON DELETE CASCADE, FOREIGN KEY (user2) REFERENCES users (id) ON DELETE CASCADE, FOREIGN KEY (inviter_id) REFERENCES users (id) ON DELETE CASCADE, PRIMARY KEY (user1, user2));
CREATE INDEX idx_friendships_user1 ON friendships (user1);
CREATE INDEX idx_friendships_user2 ON friendships (user2);
CREATE INDEX idx_friendships_state ON friendships (state);
CREATE INDEX idx_friendships_inviter_id ON friendships (inviter_id);
CREATE TABLE achievements (id TEXT PRIMARY KEY, image_url TEXT NOT NULL, name TEXT NOT NULL, description TEXT NOT NULL, achievement_field TEXT NOT NULL, achievement_value INTEGER NOT NULL, created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP);
CREATE TABLE reward_unlocks (id TEXT PRIMARY KEY, name TEXT NOT NULL, description TEXT NOT NULL, created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP, achievement_id TEXT, FOREIGN KEY (achievement_id) REFERENCES achievements (id));
CREATE TABLE user_achievements (achievement_id TEXT NOT NULL, user_id TEXT NOT NULL, created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP, FOREIGN KEY (user_id) REFERENCES users (id), FOREIGN KEY (achievement_id) REFERENCES achievements (id), UNIQUE (user_id, achievement_id));
CREATE TABLE user_achievement_checks (user_id TEXT NOT NULL UNIQUE, checked_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP, FOREIGN KEY (user_id) REFERENCES users (id));
CREATE TABLE user_stat_calculations (id TEXT PRIMARY KEY, user_id TEXT NOT NULL, stat_type TEXT NOT NULL, stat_value INTEGER NOT NULL, last_updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP, FOREIGN KEY (user_id) REFERENCES users (id));
CREATE INDEX idx_user_achievements_user_id ON user_achievements (user_id);
CREATE INDEX idx_user_achievements_achievement_id ON user_achievements (achievement_id);
CREATE INDEX idx_user_achievements_user_id_achievement_id ON user_achievements (user_id, achievement_id);
CREATE INDEX idx_reward_unlocks_achievement_id ON reward_unlocks (achievement_id);
CREATE INDEX idx_user_stat_calculations_user_id ON user_stat_calculations (user_id);
CREATE INDEX idx_user_stat_calculations_stat_type ON user_stat_calculations (stat_type);
CREATE INDEX idx_user_stat_updates_user_id ON user_stat_calculations (user_id);
CREATE INDEX idx_user_stat_updates_stat_type ON user_stat_calculations (stat_type);